{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "jumpHeight",
    "jumpDuration",
    "maxMoveSpeed",
    "accel",
    "jumpAudio",
    "default",
    "url",
    "AudioClip",
    "setJumpAction",
    "jumpUp",
    "moveBy",
    "p",
    "easing",
    "easeCubicActionOut",
    "jumpDown",
    "easeCubicActionIn",
    "callback",
    "callFunc",
    "playJumpAudio",
    "repeatForever",
    "sequence",
    "audioEngine",
    "playEffect",
    "setInputControl",
    "self",
    "eventManager",
    "addListener",
    "event",
    "EventListener",
    "KEYBOARD",
    "onKeyPressed",
    "keyCode",
    "KEY",
    "a",
    "accLeft",
    "accRight",
    "d",
    "onKeyReleased",
    "node",
    "onLoad",
    "jumpAction",
    "runAction",
    "xSpeed",
    "update",
    "dt",
    "Math",
    "abs",
    "x"
  ],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    // properties: {\n    //     // foo: {\n    //     //    default: null,      // The default value will be used only when the component attaching\n    //     //                           to a node for the first time\n    //     //    url: cc.Texture2D,  // optional, default is typeof default\n    //     //    serializable: true, // optional, default is true\n    //     //    visible: true,      // optional, default is true\n    //     //    displayName: 'Foo', // optional\n    //     //    readonly: false,    // optional, default is false\n    //     // },\n    //     // ...\n    // },\n\n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        \n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        }\n    },\n    setJumpAction: function () {\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        \n        var callback = cc.callFunc(this.playJumpAudio, this);\n        \n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n    \n    playJumpAudio: function() {\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n    \n    setInputControl: function () {\n        var self = this;\n        // 添加键盘事件监听\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            // 有按键按下时，判断是否是我们指定的方向控制键，并设置向对应方向加速\n            onKeyPressed: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = true;\n                        self.accRight = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accLeft = false;\n                        self.accRight = true;\n                        break;\n                }\n            },\n            // 松开按键时，停止向该方向的加速\n            onKeyReleased: function(keyCode, event) {\n                switch(keyCode) {\n                    case cc.KEY.a:\n                        self.accLeft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.accRight = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n    // use this for initialization\n    onLoad: function () {\n        // Initialize the jumpAction\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n        \n        // Initialize the switch\n        this.accLeft = false;\n        this.accRight = false;\n        \n        this.xSpeed = 0;\n        \n        // Initialize the setInputControl\n        this.setInputControl();\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        if(this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // limit maximum speed\n        if( Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n        \n        // update Player position with current speed\n        this.node.x += this.xSpeed * dt;\n\n    },\n});\n"
  ]
}